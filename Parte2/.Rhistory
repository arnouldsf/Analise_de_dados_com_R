hoje <- Sys.Date()
hoje
class(hoje)
Sys.time()
Sys.timezone()
Sys.time()
# Formatando Time
# %H: hora (00-23)
# %M: minuto
# %S: segundo
# %T: formado reduzido para %H:%M:%S
?strptime
as.Date("2016-06-28")
as.Date("Jun-28-16", format = "%d %B, %y")
as.Date("Jun-28-16", format = "%b-%d-%y")
# Funcao format()
Sys.Date()
format(Sys.Date(), format = "%d %B, %Y")
format(Sys.Date(), format = "Hoje Ã© %A!")
format(Sys.Date(), format = %d/%m/%Y)
format(Sys.Date(), format = %d-%m-%Y)
format(Sys.Date(), format = "%d/%m/%Y")
date1 <- "Jun 13, '96 hours:23 minutes:01 seconds:45"
date1
da1_convert <- as.POSIXct(date1, format = "%B %d, '%y hours:%H minutes:%M seconds:%S")
da1_convert
# Operacoes com Datas
data_de_hoje <- as.Date("2016-06-25", format = "%Y-%m-%d")
data_de_hoje
data_de_hoje + 1
data_de_hoje
my_time <- as.POSIXct("2016-05-14 11:24:134")
my_time
my_time + 1
as.Date(my_time)
# Convertendo Data em formato especifico
dts = c(1127056501,1104295502,1129233601,1113547501,1119826801,1132519502,1125298801,1113289201)
mydates = dts
class(mydates) = c('POSIXt','POSIXct')
mydates
mydates = dts
mydates
class(mydates) = c('POSIXt')
mydates
class(mydates) = c('POSIXt', 'POSIXt')
mydates
class(mydates) = c('POSIXt', 'POSIXct')
mydates
# Funcao ISODate
b1 = ISOdate(2011,3,23)
b1
b2 = ISOdate(2012,9,19)
b2
b2 - b1
# Pacote lubridate
?lubridate
install.packages("lubridate")
require(lubridate)
# Pacote lubridate
?lubridate
ls(pos = "package:lubridate")
# Pacote lubridate
?lubridate
ymd("20160604")
chegada <- ymd_hms("2016-06-04 12:00:00", tz = "Pacific/Auckland")
partida <- ymd_hms("2011-08-10 14:00:00", tz = "Pacific/Auckland")
chegada
partida
second(chegada)
second(chegada) <- 23
chegada
wday(chegada)
wday(chegada, label = TRUE)
class(chegada)
interval(chegada, partida)
tm1.lub <- ymd_hms("2016-05-24 23:55:26")
tm1.lub
tm2.lub <- mdy_hm("05/25/16 08:32")
tm2.lub
year(tm1.lub)
week(tm1.lub)
tm1.dechr <- hour(tm1.lub) + minute(tm1.lub)/60 + second(tm1.lub)/3600
tm1.dechr
force_tz(tm1.lub, "Pacific/Auckland")
# Gerando um dataframe de datas
sono <- data.frame(bed.time = ymd_hms("2013-09-01 23:05:24", "2013-09-02 22:51:09",
"2013-09-04 00:09:16", "2013-09-04 23:43:31", "2013-09-06 00:17:41", "2013-09-06 22:42:27",
"2013-09-08 00:22:27"), rise.time = ymd_hms("2013-09-02 08:03:29", "2013-09-03 07:34:21",
"2013-09-04 07:45:06", "2013-09-05 07:07:17", "2013-09-06 08:17:13", "2013-09-07 06:52:11",
"2013-09-08 07:15:19"), sleep.time = dhours(c(6.74, 7.92, 7.01, 6.23, 6.34, 7.42, 6.45)))
sono
sono$eficiencia <- round(sono$sleep.time/(sono$rise.time - sono$bed.time) * 100, 1)
sono
# Gerando um plot a partir de datas
par(mar = c(5, 4, 4, 4))
plot(round_date(sono$rise.time, "day"), sono$eficiencia, type = "o", col = "blue", xlab = "Manha", ylab = NA)
par(new = TRUE)
plot(round_date(sono$rise.time, "day"), sono$sleep.time/3600, type = "o", col = "red", axes = FALSE, ylab = NA, xlab = NA)
axis(side = 4)
mtext(side = 4, line = 2.5, col = "red", "Duracao do Sono")
mtext(side = 2, line = 2.5, col = "blue", "Eficiencia do Sono")
# Lista de pacotes base carregados
search()
demo("graphics")
x = 5:7
y = 8:10
plot(x,y)
?plot
altura <- c(145,167,176,123,150)
largura <- c(51,63,64,40,55)
plot(altura, largura)
plot(largura, altura)
?lynx
plot(lynx)
plot(lynx, ylab = "plots com dataframes", xlab = "")
plot(lynx, xlab = "eixo x")
plot(lynx, ylab = "plots com dataframes", xlab = "eixo x")
plot(lynx, main = "plost com lynx", col = "red")
plot(lynx, main = "Plots com Dataframes", col = 'red', col.main = 52, cex.main = 1.5)
library(datasets)
hist(warpbreaks$breaks)
airquality &lt;- transform(airquality, Month = factor(Month))
airquality &lt;- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
?par
par()
par('pch')
par('lty')
x = 2:4
plot(x, pch = "c")
par(mfrow = c(2,2), col.axis = "red")
plot(1:8, las = 0, xlab = "xlab", ylab = "ylab", main = "LAS = 0")
plot(1:8, las = 1, xlab = "xlab", ylab = "ylab", main = "LAS = 1")
plot(1:8, las = 2, xlab = "xlab", ylab = "ylab", main = "LAS = 2")
plot(1:8, las = 3, xlab = "xlab", ylab = "ylab", main = "LAS = 3")
legend("topright", pch = 1, col = c("blue", "red"), legend = c("Var1","Var2"))
colors()
# Estendendo as funcoes do plot
install.packages('plotrix')
library(plotrix)
ls(plotrix)
ls("plotrix")
ls.str("package:plotrix")
par(mfrow = c(1,1), col.axis = "red")
plot(1:6, las = 3, xlab = "lty 1:6", ylab = "", main = "Mais opcoes ao plot")
ablineclip(v=1, lty=1, col="sienna2", lwd=2)
ablineclip(v=2, lty=1, col="sienna2", lwd=2)
ablineclip(v=3, lty=1, col="sienna2", lwd=2)
ablineclip(v=4, lty=1, col="sienna2", lwd=2)
ablineclip(v=5, lty=1, col="sienna2", lwd=2)
ablineclip(v=6, lty=1, col="sienna2", lwd=2)
ablineclip(v=7, lty=1, col="sienna2", lwd=2)
plot(lynx)
plot(lynx, type="p", main="Type p")
plot(lynx, type="l", main="Type l")
plot(lynx, type="b", main="Type b")
plot(lynx, type="o", main="Type o")
plot(lynx, type="h", main="Type h")
plot(lynx, type="s", main="Type s")
plot(lynx, type="n", main="Type n")
# Dois plots juntos
par(mar=c(4,3,3,3), col.axis="black")
plot(cars$speed, type="s", col="red", bty="n", xlab="Cars ID", ylab="")
text(8, 14, "Velocidade", cex=0.85, col="red")
par(new=T)
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4)
text(37, 18, "DistÃ¢ncia", cex=0.85, col="darkblue") #
title(main="Velocidade x DistÃ¢ncia")
# Plots a partir de datasets
df <- read.csv('pibpercap.csv', stringsAsFactors = F)
getwd()
# Plots a partir de datasets
df <- read.csv('C:/Users/arnou/OneDrive/Documentos/ARNOULD/Data_Science_Academy/R_fundamentos_para_analise_de_dados/DATASETS/parte2/pibpercap.csv', stringsAsFactors = F)
head(df)
df_1982 <- subset(df, ano == 1982)
df_1982
head(df_1982)
plot(expectativa ~ pibpercap, data = df_1982, log = "x")
mycol <- c(Asia = "tomato", Europe = "chocolate4", Africa = "dodgerblue2",
Americas = "darkgoldenrod1", Oceania = "green4")
plot(expectativa ~ pibpercap, data = df_1982, log = "x", col = mycol[continente])
mycex <- function(var, r, f = sqrt){
x = f(var)
x_scaled = (x - min(x))/(max(x) - min(x))
r[1] + x_scaled * (r[2] - r[1])
}
plot(expectativa ~ pibpercap, data = df_1982, log = "x",
col = mycol[continente],
cex = mycex(pop, r = c(0.2, 10))
)
