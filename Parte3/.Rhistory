getwd()
# Download e unzip do arquivo
url <- "http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte3/crimes.zip"
library(ggmap)
library(ggplot2)
library(downloader)
arquivo <- "crimes.zip"
download(url, arquivo)
unzip("crimes.zip")
df<-read.csv("crimes.txt")
head(df)
str(df)
dim(df)
# Criando o plot
mapa <- qmap("seattle", zoom = 11, source = "stamen",
maptype = "toner", darken = c(.3,"#BBBBBB"))
mapa
# Criando o plot
mapa <- qmap("seattle", zoom = 11, source = "stamen",
maptype = "toner", darken = c(.3,"#BBBBBB"))
mapa
install.packages("ggmap")
install.packages("ggmap")
library(ggmap)
library(ggplot2)
library(ggmap)
library(downloader)
# Criando o dataframe
df <- read.csv("crimes.txt")
# Criando o plot
mapa <- qmap("seattle", zoom = 11, source = "stamen",
maptype = "toner", darken = c(.3,"#BBBBBB"))
mapa
# Mapeando os dados
mapa + geom_point(data = df, aes(x = Longitude, y = Latitude))
# Criando o plot
mapa <- qmap("seattle", zoom = 11, source = "stamen",
maptype = "toner", darken = c(.3,"#BBBBBB"))
mapa
# Mapeando os dados
mapa + geom_point(data = df, aes(x = Longitude, y = Latitude))
# Mapeando os dados
mapa + geom_point(data = df, aes(x = Longitude, y = Latitude))
# Mapeando os dados e ajustando a escala
mapa + geom_point(data = df, aes(x = Longitude, y = Latitude),
color = "dark green", alpha = .03, size = 1.1)
search()
?read.table
df1 <- read.table("pedidos.txt")
df1
dim(df1)
df1 <- read.table("pedidos.txt", header = TRUE, sep = ",")
df1
df2 <- read.csv("pedidos.txt")
df2
dim(df2)
df3 <- read.csv2("pedidos.txt")
df3
dim(df3)
df3 <- read.csv2("pedidos.txt", sep=",")
df3
library(readr)
# Abre o promt para escolher o arquivo
meu_arquivo <- read_csv(file.choose())
df1<-read_table("temperaturas.txt", col_names= c("DAY", 'MONTH', 'YEAR', "TEMP"))
df1
# Importando arquivos
df1 <- read_table("temperaturas.txt",
col_names = c("DAY","MONTH","YEAR","TEMP"))
head(df1)
str(df1)
read_lines(df1)
read_lines("temperaturas.txt")
help("options")
options(max.print = 1000000 )
read_lines("temperaturas.txt")
library(dplyr)
Sys.setenv(JAVA_HOME = '/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre')
Sys.getenv("JAVA_HOME")
system("java -version")
options(java.home = "/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home/jre")
install.packages("rJava", type = "source")
install.packages("xlsx")
install.packages("XLConnect")
install.packages("readxl")
install.packages("gdata")
library(readxl)
library(rJava)
library(xlsx)
library(XLConnect)
library(rJava)
install.packages("rJava", type = "source")
library(rJava)
install.packages("rJava", type = "source")
read_csv("cadastro.csv")
View(cadastro)
install.packages("rJava")
library(readxl)
library(rJava)
library(xlsx)
search()
# Lista as worksheet no arquivo Excel
excel_sheets("UrbanPop.xlsx")
# Lendo a planilha do Excel
read_excel("UrbanPop.xlsx")
head(read_excel("UrbanPop.xlsx"))
read_excel("UrbanPop.xlsx", sheet = "Period2")
read_excel("UrbanPop.xlsx", sheet = 3)
library(readxl)
titanic <- read_excel("~/ARNOULD/Data_Science_Academy/R_fundamentos_para_analise_de_dados/DATASETS/parte3/titanic.csv")
View(titanic)
library(readr)
titanic <- read_csv("~/ARNOULD/Data_Science_Academy/R_fundamentos_para_analise_de_dados/DATASETS/parte3/titanic.csv")
View(titanic)
library(ggplot2)
ggplot(data = titanic)
plot(titanic)
View(titanic)
`colnames(titanic) <- c("var1", "var2", "nome", "sexo", "idade", "var6", "var7", "var8", "cabine", "var10", "var11", "cidade")
;
"aaa"
"aaaa"
;
names(titanic) <- ("var1")
colnames(titanic) <- c("var1", "var2", "nome", "sexo", "idade", "var6", "var7", "var8", "cabine", "var10", "var11", "cidade")
View(titanic)
teste <- c(titanic$sexo, titanic$idade)
teste <- data.frame(titanic$sexo, titanic$idade)
View(teste)
library(ggplot2)
ggplot(teste)
ggplot(teste, aes(titanic.sexo, titanic.idade))+geom_bar()
ggplot(teste, aes(titanic.sexo, titanic.idade))+geom_bar(titanic.sexo)
ggplot(teste, aes(titanic.sexo, titanic.idade))
grafico <- ggplot(teste, aes(titanic.sexo, titanic.idade))
grafico + geom_histogram()
grafico + geom_bar()+labs(fill = "titanic.sexo")
plot(teste)
barplot(teste)
names(teste)<- c("sexo", "idade")
colnames(teste)<-c("sexo", "idade")
View(teste)
grafico + geom_bar()+labs(fill = "sexo$male")
?geom_bar
mulheres <- matrix(teste$sexo$female, teste$idade)
teste
summary(teste)
mode(teste)
typeof(teste)
class(teste)
typeof(teste$sexo)
# Instalar SQLite
install.packages("RSQLite")
library(RSQLite)
# Criando driver e conexao ao banco de dados
drv = dbDriver("SQLite") #cria o driver de conexao
con = dbConnect(drv, dbname = "exemplo.db") #cria a conexao
dbListTables(con)
# Encerrando a conexÃ£o
dbDisconnect(con)
View(con)
install.packages('RMySQL')
library(RMySQL)
library(ggplot2)
library(dplyr)
# Conexao com o banco de dados
con = dbConnect(MySQL(), user = "arnould", password = "speed12", dbname = "titanicDB", host = "localhost")
# Conexao com o banco de dados
con = dbConnect(MySQL(), user = "arnould", password = "speed12", dbname = "titanicDB", host = "localhost")
library(readr)
library(dplyr)
# Suprimindo mensagens de warning
searchpaths()
suppressMessages(library(dplyr))
# Carregando o dataset
df_sono <- read_csv("http://datascienceacademy.com.br/blog/aluno/RFundamentos/Datasets/Parte3/sono.csv")
head(df_sono)
class(df_sono)
str(df_sono)
glimpse(df_sono)
glimpse(mutate(df_sono, peso_libras = sono_total / 0.45359237))
count(df_sono, cidade)
hist(df_sono$sono_total)
sample_n(df_sono, size = 10)
# select()
sleepData <- select(df_sono, nome, sono_total)
head(sleepData)
sleepData
select(df_sono, nome)
df_sono$nome
select(df_sono, nome:cidade)
# filter()
filter(df_sono, sono_total >= 16)
filter(df_sono, sono_total >= 16, peso >= 80)
filter(df_sono, cidade %in% c("Recife", "Curitiba"))
# arrange()
df_sono %>% arrange(cidade) %>% head
# arrange()
df_sono %>% arrange desc(cidade) %>% head
# arrange()
df_sono %>% arrange(desc(cidade)) %>% head
df_sono %>% arrange(desc(cidade)) %>% head
df_sono %>%
select(nome, cidade, sono_total) %>%
arrange(cidade, sono_total) %>%
head
df_sono %>%
select(nome, cidade, sono_total) %>%
arrange(sono_total, cidade) %>%
head
df_sono %>%
select(nome, cidade, sono_total) %>%
arrange(sono_total) %>%
head
# summarize()
df_sono %>%
summarise(media_sono = mean(sono_total))
df_sono %>%
summarise(media_sono = mean(sono_total),
min_sono = min(sono_total),
max_ssono = max(sono_total),
total = n())
# group_by()
df_sono %>%
group_by(cidade) %>%
summarise(avg_sono = mean(sono_total),
min_sono = min(sono_total),
max_sono = max(sono_total),
total = n())
# Instalar e carregar os pacotes
install.packages("quantmod")
install.packages("xts")
install.packages("moments")
library(quantmod)
library(xts)
library(moments)
startdate = as.Date("2016-01-21")
endDate = as.Date("2016-06-21")
getSymbols("PETR4.SA", src = "yahoo", from = startDate, to = endDate)
endDate = as.Date("2016-06-21")
getSymbols("PETR4.SA", src = "yahoo", from = startDate, to = endDate)
getSymbols("PETR4.SA", src = "yahoo", from = startDate, to = endDate)
# Selecao do periodo de analise
startDate = as.Date("2018-01-21")
endDate = as.Date("2018-05-20")
getSymbols("PETR4.SA", src = "yahoo", from = startDate, to = endDate)
# Checando o tipo de dado retornado
class(PETR4.SA)
is.xts(PETR4.SA)
# Mostra os primeiros registros para as acoes da Petrobras
head(PETR4.SA)
# Analisando os dados de fechamento
PETR4.SA.Close <- PETR4.SA[, "PETR4.SA.Close"]
is.xts(PETR4.SA.Close)
head(Cl(PETR4.SA),5)
candleChart(PETR4.SA)
# Plot do fechamento
plot(PETR4.SA.Close, main = "Fechamento DiÃ¡ria AÃ§Ãµes Petrobras",
col = "red", xlab = "Data", ylab = "PreÃ§o", major.ticks = 'months',
minor.ticks = FALSE)
# Plot do fechamento
plot(PETR4.SA.Close, main = "Fechamento Diario das açoes da Petrobras",
col = "red", xlab = "Data", ylab = "Preço", major.ticks = 'months',
minor.ticks = FALSE)
addBBands(n = 20, sd = 2)
addADX(n = 11, maType = "EMA")
PETR4.SA.ret <- diff(log(PETR4.SA.Close), lag = 1)
# Remove valores NA na prosicao 1
PETR4.SA.ret <- PETR4.SA.ret[-1]
# Plotar a taxa de retorno
plot(PETR4.SA.ret, main = "Fechamento DiÃ¡rio das AÃ§Ãµes da Petrobras",
col = "red", xlab = "Data", ylab = "Retorno", major.ticks = 'months',
minor.ticks = FALSE)
# Pacote rvest - util para quem nao conhece HTML e CSS
install.packages('rvest')
library(rvest)
filme <- read_html("http://www.imdb.com/title/tt4172430/")
class(filme)
head(filme)
install.packages(Stan125/GREA)
head(iris)
library(lattice)
iris_modif <- reshape(iris,)
iris_modif <- reshape(iris,
varying = 1:4,
v.names = "medidas",
timevar = "Dimensoes",
times = names(iris)[1:4],
idvar = "ID",
direction = "long")
head(iris_modif)
bwplot(Medidas ~ Species | Dimensoes, data = iris_modif)
iris_modif
bwplot(Medidas ~ Species | Dimensoes, data = iris_modif)
library(lattice)
bwplot(Medidas ~ Species | Dimensoes, data = iris_modif)
iris_modif_sp <- reshape(iris,
varying = list(c(1,3),c(2,4)),
v.names = c("Comprimento", "Largura"),
timevar = "Parte",
times = c("Sepal", "Petal"),
idvar = "ID",
direction = "long")
head(iris_modif_sp)
?reshape
head(iris)
xyplot(Comprimento ~  Largura | Species, groups = Parte,
data = iris_modif_sp, auto.key = list(space="right"))
xyplot(Comprimento ~  Largura | Parte, groups = Species,
data = iris_modif_sp, auto.key = list(space="right"))
install.packages("gapminder")
library(gapminder)
library(plyr)
# Split-Apply-Combine
df <- ddply(gapminder, ~ continent,
summarize,
max_le = max(lifeExp))
str(df)
head(df)
## Matrizes
mat <- matrix(1:9, nrow = 3)
colnames(mat) <- c("A", "B", "C")
mat
mat[1:,:3]
mat[1:1,1:3]
mat[1,3]
mat[1:3,3]
mat[3,1:3]
mat$1,
reis <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat", skip = 3)
reis
class(reis)
ts_reis <- ts(reis)
ts_reis
as.integer('4.27')
as.integer("JOE")
matriz <- matrix(1:10, nrow=2)
matriz
matriz <- matrix(1:10, ncol=2)
matriz
matriz[5,2]
matriz[4,2]
exercicio <- read.csv
?utils
help = "utils"
help
library(help = "utils")
data <- format("july 17, 27", format = "%B%d,%Y")
data
data <- format("july 17, 2017", format = "%B%d,%Y")
data
lista<- list(a=(1:20), b=(45:77))
lisrta
lista
sapply(lista, sum)
built()
builtins()
mtcars[4,7]
rbind()
library(dplyr)
select(iris,everything())
